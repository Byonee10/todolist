(()=>{"use strict";const t=(()=>{let t=[],e=1;return{getToDoList:function(){return t},addTotoDoList:function(o){const n=(i=e,r=o.title,c=o.description,d=o.dueDate,l=o.priority,s=o.completed,{id:i,title:r,description:c,dueDate:d,priority:l,completed:s});var i,r,c,d,l,s;return e++,t.push(n),n},removeItemById:function(e){t=t.filter((t=>t.id!==parseInt(e))),console.log("removeitembyÄ°d works")},editItem:function(e,o,n,i,r,c){const d=t.findIndex((t=>t.id==e));-1!==d&&(t[d].title=o,t[d].description=n,t[d].dueDate=i,t[d].priority=r,toDolist[d].completed=c)},filterItemsByPriority:function(e){return t.filter((t=>t.priority==e))},print:function(){for(let e=0;e<t.length;e++)console.log(t[e])},saveToLocalStorage:function(){localStorage.setItem("toDoList",JSON.stringify(t))},loadFromLocalStorage:function(){const e=localStorage.getItem("toDoList");e&&(t=JSON.parse(e))}}})(),e=(()=>{let e=document.querySelector(".todoList");const o=document.querySelector(".submit-btn");let n=t.getToDoList();const i=document.querySelector("#save-btn"),r=document.querySelector("#load-btn");function c(t){const o=document.createElement("div");o.innerHTML=`<div class="todoProperties">\n            <h3>Title: ${t.title}</h3>\n            <p>Description: ${t.description}</p>\n            <p>Due date: ${t.dueDate}</p>\n            <div class="todoCompletionStatus">Task status\n                <label class="switch">\n                    <input data-index="${t.id}" type="checkbox" ${t.completed} ? 'checked' : ''}>\n                    <span class="slider round"></span>\n                </label>\n            </div>\n            <button type="button" class="remove-button" data-index="${t.id}">REMOVE</button>\n        </div>`,e.appendChild(o),o.querySelector('input[type="checkbox"]').addEventListener("change",(t=>{const e=t.target.dataset.index,o=n.findIndex((t=>t.id.toString()===e));-1!==o&&(n[o].completed=t.target.checked)})),o.querySelector(".remove-button").addEventListener("click",d)}function d(e){const o=e.target.dataset.index;console.log(o),t.removeItemById(o),n=t.getToDoList(),l()}function l(){e.innerHTML="";for(let e=0;e<n.length;e++)c(n[e]),t.print()}o.addEventListener("click",(()=>{const e={title:document.querySelector("#title").value,description:document.querySelector("#description").value,dueDate:document.querySelector("#dueDate").value,priority:document.querySelector("#priority").value,completed:!1};e&&(t.addTotoDoList(e),l())})),i.addEventListener("click",t.saveToLocalStorage),r.addEventListener("click",(()=>{t.loadFromLocalStorage(),n=t.getToDoList(),l()}))})();e()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,